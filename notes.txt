Chapter 2 - C Fundamentals:

Compiling steps:
  1. Preprocessing 
  2. Compiling
  3. Linking

Preprocessing - obeys commands that start with # (directives). Can add to and modify program.

Compiling - translates program into machine instructions (object code).

Linking - combines object code produced with additional code needed to yield complete executable.
          Additional code includes library functions.



Simple C program pseudocode

```
directives

int main(void){ 
    statements

}

````

directives - Editing commands that modify the program prior to compilation

Macro Definition - (#define) term for naming constants in file
#define is a preprocessing directive
ex: #define INCHES 12

==================================================================================================

Chapter 3 - Formatted Input/Output: 

Conversion Specifiers:
    %d - Displays a decimal integer in base 10
    %e - Displays floating-point number in exponential form
    %f - Displays ploating-point number in fixed decimal form
    %g - Displays floating-point number in either exponential form or fixed decimal form,
         depending on the numbers size. Useful for displaying numbers of unknown size.
        
Escape Sequences:
    \a - Alert(bell)
    \b - Backspace
    \n - Newline
    \t - Horizontal tab

==================================================================================================

Chapter 4 - Expressions

Operator Precedence:
    Highest: +  -  (unary)
             *  /     %
    Lowest:  +  -  (binary)

    operators on the same line have equal precedence.
    unary - does nothing, used to emphasize a numeric constant is positive

Type Conversion:    
    If v and e don't have the same type,
    then the value of e is converted to the type of v as the assignment takes place:

    int i;
    float f;
    i = 72.99f;
    f = 136;

    i is now 72 
    f is now 136.0 

Increment and Decrement Operators:
    prefix: ++i and --i
        * "pre-increment" yields i + 1 and as a side effect, increments i
        * same for pre-decrement
        ex: i = 1;
            print(++i); -> prints 2
            print(i);   -> prints 2
    postfix: i++ and i--
        * "post-increment" yields i first then increments i after.
        *  same for post-decrement
        ex: i = 1;
            print(i++); -> prints 1
            print(i);   -> prints 2

==================================================================================================

Chapter 6 - Loops

The "do" Statement:
    * do is a while statement whose controlling expression is tested 
    * after each execution of the loop body.

"for" Statement Idioms:
    Counting up from 0 to n—l:
        for (i = O; i < n; i++)
    Counting up from 1 to n:
        for (i = 1; i <= n; i++)
    Counting down from n—l to 0:
        for (i = n - 1; i >= O; i--)
    Counting down from n to 1:
        for (i = n; i > O; i--)
    Infinite loop:
        for (;;)


The "goto" Statement:
    * capable of jumping to any statement in a function that has a label
    * useful for exiting from switches and nested loops

    ex: for (d = 2; d < n; d++)
          if ( n % d == 0)
              goto done;
        
        done:
            if (d < n)
                printf("%d is divisible by %d\n", n, d);
            else
                printf("%d is prime\n", n);

The "null" Statement:
    * expressed as just ";" by itself on a line
    * good for writing loops whose bodies are empty

==================================================================================================

Chapter 7 - Basic Types

Signed and Unsigned Integers:
    * In C, integers are signed by default
    * need to declare unsigned if we want to use an unsigned int

    * Leftmost bit of a signed integer (known as the sign bit)
        * 0 if positive 
        * 1 if negative

    * Integer with no sign bit is said to be unsigned

    * Binary representation:
        * 16 bit integer:
            * 0111111111111111 has the value 32,767 (2^15 - 1)
        * 32 bit integer: 
            * 01111111111111111111111111111111 has value of 2,147,483,647 (2^31 - 1)
    
    * int is usually 32 bits,
      may be 16 bits on older cpus
    
    * A Few Types of ints
        * short int
        * unsigned short in

        * int
        * unsigned int

        * long int
        * unsigned long int

* In C, you can abbreviate the type and omit int
    * i.e. long int can be declared by just long

* C Standard rules for compilers
    * short int, int, and long int must cover a certain range of values 
    * int must not be shorter than short int, however short int can represent int ranges
    * long int cannot be shorter than int



Integer Types

    32-bit machine

    +-----------------------+-------------------+-------------------+
    | Type                  | Smallest Value    | Largest Value     |
    +-----------------------+-------------------+-------------------+
    | short int             |          -32,768  |            32,767 |
    | unsigned short int    |               0   |            65,535 |
    | int                   |  -2,147,483,648   |  2,147,483,647    |
    | unsigned int          |               0   |  4,294,967,295    |
    | long int              |  -2,147,483,648   |  2,147,483,647    |
    | unsigned long int     |               0   |  4,294,967,295    |
    +-----------------------+-------------------+-------------------+

    64-bit machine

    +-----------------------+---------------------------+---------------------------+
    | Type                  | Smallest Value            | Largest Value             |
    +-----------------------+---------------------------+---------------------------+
    | short int             |                  -32,768  |                   32,767  |
    | unsigned short int    |                        0  |                   65,535  |
    | int                   |           -2,147,483,648  |           2,147,483,647   |
    | unsigned int          |                        0  |           4,294,967,295   |
    | long int              | -9,223,372,036,854,775,808|  9,223,372,036,854,775,807|
    | unsigned long int     |                        0  |18,446,744,073,709,551,615 |
    +-----------------------+---------------------------+---------------------------+
 
    * These ranges are not not mandated and may vary
    * The best way to check the integer types for a implementation
      is to check the <limits.h> header file.


* C99 also has long long int and unsigned long long int.
  Also allows you to implementation-defined extended integer types.
    
Integer Constants

    * C allows integer constants to be written in decimal (base 10), octal (base 8), 
      and hexadecimal (base 16).

    * Octal: Written only using digits 0-7
        * Each position represents a power of 8
        * Must begin with 0

    * Hexadecimal: writtin using 0-9 and letters A-F which stand for 10-15
        * Each position represents a power of 16
        * ALWAYS begins with 0x
        * letters may be upper or lower case

    * Decimal: Written only using digits 0-9
        * Must not begin with 0

    * All notations can be mixed together 

    * To force the compiler to treat a constant as a long,
      append the letter L to the end.
        ex: 15 -> 15L, 0377 -> 0377L, 0x7fff -> 0x7fffL

    * To force the compiler to treat a constant as unsigned,
      append the letter U to the end.
        ex: 15 -> 15U, 0377 -> 0377U, 0x7fff -> 0x7fffU

    * L and U may be used in combination to show both
         



Integer Constants in C99

    * In C99, integer constants that end with either LL or ll (the case of the two letters
    must match) have type long long int. Adding the letter U (or u) before or after
    the LL or ll denotes a constant of type unsigned long long int.

    * C99's general rules for determining the type of an integer constant are a bit different 
      from those in C89. The type of a decimal constant with no suffix (U, u, L, l, LL, or ll) is 
      the "smallest" of the types int, long int, or long long int that can represent 
      the value of that constant. For an octal or hexadecimal constant, however,
      the list of possible types is int, unsigned int, long int, unsigned long int, 
      long long int, and unsigned long long int, in that order. Any suffix at the end of a constant 
      changes the list of possible types.


      ex: a constant that ends with U (or u) must have one of the types unsigned int,
          unsigned long int, or unsigned long long int. A decimal constant that ends
          with L (or l) must have one of the types long int or long long int.
          There's also a provision for a constant to have an extended integer type if it's too large
          to represent using one of the standard integer types.

Integer Overflow

    * Occurs when arithmetic operations are performed on integers and the result
      is too large to represent.

      ex: When an arithmetic operation is performed on two ints, the result MUST be represented 
          as an int. If it cannot be represented as an int (because it requires too many bits),
          then an overflow has occurred.

    * Behavior when overflow occurs depends on whether the operands were signed or unsigned.

    * Overflow on Signed Ints: 
        * Program behavior is undefined; behavior may vary.
    
    * Overflow on Unsigned Ints:
        * Result is defined
        * Get the correct ansew modulo 2^n where n is the number of bits used to 
          store the result.

    * For example, if we add 1 to the unsigned 16-bit number 65,535, 
      the result is guaranteed to be 0.

      ex: Max unsigned short int = 65,535 
            65,535 + 1 = 65,536
            then we take the mod of 65,536
            65,536 % 65,536 = 0
            
Reading and Writing Integers

    * Unsigned Integers:
        * When reading or writing an unsigned integer, 
          use the letter u, o, or x instead of d in the conversion specification.

          ex:
            unsigned int i;

            scanf("%u", &i);    // reads i in base 10
            printf("%u", &i);    // writes i in base 10

            scanf("%o", &i);    // reads i in base 8
            printf("%o", &i);    // writes i in base 8
            
            scanf("%x", &i);    // reads i in base 16
            printf("%x", &i);    // writes i in base 16

    * Short Integers:
        * When reading or writing short integers,
          put the letter 'h' in front of d, o, u, or x.

          ex: 
            short s;

            scanf("%hd", &s);

    * Long Integers:
        * When reading or writing long integers,
          put the letter 'l' in front of d, o, u, or x.

          ex:
            long l;

            scanf("%ld", &l);

        In C99:
          ex:
            long long ll;

            scanf("11d", &11);


Floating Types

    * 3 Floating Types in C
        
        * float: 
            * single-precision floating-point
            * suitable when amount of precision isn't critical
            * ex: calculating temps to one decimal point

        * double:
            * double-precision floating-point 
            * provides greater precision, enough for most programs

        * long double:
            * Extended-precision floating-point 
            * supplies ultimate precision (rarely used)



        Floating Type Characteristics

        +-----------+------------------------+--------------------+-------------+
        |   Type    | Smallest Positive Value|    Largest Value   |  Precision  |
        +-----------+------------------------+--------------------+-------------+
        |  float    |     1.17549 x 10^-38   |    3.40282 x 10^38 |   6 digits  |
        |  double   |     2.22507 x 10^-308  |    1.79769 x 10^308|  15 digits  |
        +-----------+------------------------+--------------------+-------------+

Floating Constants

    * Floating constants must contain a decimal point and/or exponent

    * The exponent indicates the power of 10 by which a number is scaled,
      must be preceded by the letter E (or e). 

    * An optional + or - sign may appear after the E

    * Valid constants:
         57.0 57. 57.0e0 57E0 5.7e1 5.7e+1 .57e2 570.e-1

    * By default, floating constants are stored as double-digit precision numbers.

    * To force the compiler to store a floating point constant in float,
      put the letter F (or f) at the end of the constant.

    * For long double format, put the letter L (or l) at the end.

    ex: reading value of type double, put in in front of e, f, or g:
        
        double d;

        scanf("%lf", &d);

        NOTE: only use l in scanf, not printf.

Character Types

    * Char:
        * a variable type that can be assigned to any single character

Operations on Characters

    * C treats characters as small integers 
